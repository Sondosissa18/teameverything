let express,mongoose,staticDirectory,SERVER_PORT,logger,registerExpressRoutes;_e42‍.w("express",[["default",["express"],function(v){express=v}]]);_e42‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_e42‍.w("./helpers.js",[["staticDirectory",["staticDirectory"],function(v){staticDirectory=v}],["SERVER_PORT",["SERVER_PORT"],function(v){SERVER_PORT=v}],["logger",["logger"],function(v){logger=v}]]);_e42‍.w("./routes/index.js",[["registerExpressRoutes",["registerExpressRoutes"],function(v){registerExpressRoutes=v}]]);








const startServer = async () => {
  mongoose.Promise = global.Promise;
  await mongoose.connect(`${process.env.MONGO_DB_URL}/test`, {
    useNewUrlParser: true,
  });
  const app = express();
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(express.static(staticDirectory));
  app.use((req, res, next) => {
    next();
  });

  registerExpressRoutes(app);
  _e42‍.g.console.log(SERVER_PORT)
  app.listen(SERVER_PORT, () =>
    logger.info(`Example app listening at http://localhost:${SERVER_PORT}`)
  );
};

try {
  startServer();
} catch (err) {
  logger.error("Server crashed :(", err);
}

process.on("unhandledRejection", (reason, p) => {
  logger.error("Unhandled Rejection at:", p, "reason:", reason);
  // send entire app down.Process manager will restart it
  process.exit(1);
});
